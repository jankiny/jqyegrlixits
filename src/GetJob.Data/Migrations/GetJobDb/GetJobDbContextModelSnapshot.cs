// <auto-generated />
using System;
using GetJob.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GetJob.Data.Migrations.GetJobDb
{
    [DbContext(typeof(GetJobDbContext))]
    partial class GetJobDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GetJob.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyFieldId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyFieldId");

                    b.ToTable("C_Company");

                    b.HasData(
                        new
                        {
                            Id = "a1b0c2d4-eabc-1024-deed-adeabcdefabc",
                            CompanyFieldId = 1,
                            Description = "无",
                            Name = "树苗"
                        });
                });

            modelBuilder.Entity("GetJob.Models.CompanyField", b =>
                {
                    b.Property<int>("CompanyFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CompanyFieldId");

                    b.ToTable("C_CompanyField");

                    b.HasData(
                        new
                        {
                            CompanyFieldId = 1,
                            Text = "服务业"
                        });
                });

            modelBuilder.Entity("GetJob.Models.InterviewNotify", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InterviewLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ToStudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ToStudentId");

                    b.ToTable("C_InterviewNotify");

                    b.HasData(
                        new
                        {
                            Id = "a1b0c2d4-eabc-1024-deed-adeabcdefabc",
                            InterviewDate = new DateTime(2020, 10, 19, 9, 35, 35, 652, DateTimeKind.Local).AddTicks(4948),
                            InterviewLocation = "",
                            JobId = "a1b0c2d4-eabc-1024-deed-adeabcdefabc",
                            Title = "通知测试种子数据",
                            ToStudentId = "a1b0c2d4-eabc-1024-deed-adeabcdefabc"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Job", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("JobCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("JobKindId")
                        .HasColumnType("int");

                    b.Property<int>("JobPayId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ResumeReceived")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobCharacterId");

                    b.HasIndex("JobKindId");

                    b.HasIndex("JobPayId");

                    b.ToTable("C_Job");

                    b.HasData(
                        new
                        {
                            Id = "a1b0c2d4-eabc-1024-deed-adeabcdefabc",
                            CompanyId = "a1b0c2d4-eabc-1024-deed-adeabcdefabc",
                            JobCharacterId = 3,
                            JobKindId = 10001,
                            JobPayId = 4,
                            Name = "测试攻城师"
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobCharacter", b =>
                {
                    b.Property<int>("JobCharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobCharacterId");

                    b.ToTable("C_JobCharacter");

                    b.HasData(
                        new
                        {
                            JobCharacterId = 1,
                            Text = "全职"
                        },
                        new
                        {
                            JobCharacterId = 2,
                            Text = "临时"
                        },
                        new
                        {
                            JobCharacterId = 3,
                            Text = "实习"
                        },
                        new
                        {
                            JobCharacterId = 4,
                            Text = "兼职"
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobKind", b =>
                {
                    b.Property<int>("JobKindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobKindId");

                    b.ToTable("C_JobKind");

                    b.HasData(
                        new
                        {
                            JobKindId = 10000,
                            Text = "计算机类"
                        },
                        new
                        {
                            JobKindId = 10001,
                            Text = "测试"
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobPay", b =>
                {
                    b.Property<int>("JobPayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("PayFrom")
                        .HasColumnType("float");

                    b.Property<double>("PayTo")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobPayId");

                    b.ToTable("C_JobPay");

                    b.HasData(
                        new
                        {
                            JobPayId = 1,
                            PayFrom = 0.0,
                            PayTo = 1000.0,
                            Text = "1000以下"
                        },
                        new
                        {
                            JobPayId = 2,
                            PayFrom = 1000.0,
                            PayTo = 2000.0,
                            Text = "1000~2000"
                        },
                        new
                        {
                            JobPayId = 3,
                            PayFrom = 2000.0,
                            PayTo = 3000.0,
                            Text = "2000~3000"
                        },
                        new
                        {
                            JobPayId = 4,
                            PayFrom = 3000.0,
                            PayTo = 4000.0,
                            Text = "3000~4000"
                        },
                        new
                        {
                            JobPayId = 5,
                            PayFrom = 4000.0,
                            PayTo = 6000.0,
                            Text = "4000~6000"
                        },
                        new
                        {
                            JobPayId = 6,
                            PayFrom = 6000.0,
                            PayTo = 8000.0,
                            Text = "6000~8000"
                        },
                        new
                        {
                            JobPayId = 7,
                            PayFrom = 8000.0,
                            PayTo = 10000.0,
                            Text = "8000~10000"
                        },
                        new
                        {
                            JobPayId = 8,
                            PayFrom = 10000.0,
                            PayTo = 15000.0,
                            Text = "10000~15000"
                        },
                        new
                        {
                            JobPayId = 9,
                            PayFrom = 15000.0,
                            PayTo = 20000.0,
                            Text = "15000~20000"
                        },
                        new
                        {
                            JobPayId = 10,
                            PayFrom = 20000.0,
                            PayTo = 30000.0,
                            Text = "20000~30000"
                        },
                        new
                        {
                            JobPayId = 11,
                            PayFrom = 30000.0,
                            PayTo = 50000.0,
                            Text = "30000~50000"
                        },
                        new
                        {
                            JobPayId = 12,
                            PayFrom = 50000.0,
                            PayTo = 10000000.0,
                            Text = "50000以上"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Nation", b =>
                {
                    b.Property<int>("NationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("NationId");

                    b.ToTable("S_Nation");

                    b.HasData(
                        new
                        {
                            NationId = 1,
                            Text = "汉族"
                        },
                        new
                        {
                            NationId = 2,
                            Text = "蒙古族"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Csny")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MzId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xh")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Xm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZzId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("S_Student");

                    b.HasData(
                        new
                        {
                            StudentId = "a1b0c2d4-eabc-1024-deed-adeabcdefabc",
                            Adress = "null",
                            Csny = "null",
                            Mail = "null",
                            MzId = "null",
                            Phone = "null",
                            Xb = "男",
                            Xh = "2017050213",
                            Xm = "吴知",
                            ZzId = "null"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Company", b =>
                {
                    b.HasOne("GetJob.Models.CompanyField", "CompanyField")
                        .WithMany()
                        .HasForeignKey("CompanyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.InterviewNotify", b =>
                {
                    b.HasOne("GetJob.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Student", "ToStudent")
                        .WithMany()
                        .HasForeignKey("ToStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.Job", b =>
                {
                    b.HasOne("GetJob.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobCharacter", "JobCharacter")
                        .WithMany()
                        .HasForeignKey("JobCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobKind", "JobKind")
                        .WithMany()
                        .HasForeignKey("JobKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobPay", "JobPay")
                        .WithMany()
                        .HasForeignKey("JobPayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
