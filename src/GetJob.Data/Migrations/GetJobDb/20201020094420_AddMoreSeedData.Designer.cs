// <auto-generated />
using System;
using GetJob.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GetJob.Data.Migrations.GetJobDb
{
    [DbContext(typeof(GetJobDbContext))]
    [Migration("20201020094420_AddMoreSeedData")]
    partial class AddMoreSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GetJob.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyFieldId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyScaleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyFieldId");

                    b.HasIndex("CompanyScaleId");

                    b.ToTable("C_Company");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            CompanyFieldId = 1,
                            CompanyScaleId = 1,
                            Description = "无",
                            Name = "树苗"
                        });
                });

            modelBuilder.Entity("GetJob.Models.CompanyField", b =>
                {
                    b.Property<int>("CompanyFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CompanyFieldId");

                    b.ToTable("Dir_CompanyField");

                    b.HasData(
                        new
                        {
                            CompanyFieldId = 1,
                            Text = "服务业"
                        });
                });

            modelBuilder.Entity("GetJob.Models.CompanyScale", b =>
                {
                    b.Property<int>("CompanyScaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CompanyScaleId");

                    b.ToTable("Dir_CompanyScale");

                    b.HasData(
                        new
                        {
                            CompanyScaleId = 1,
                            Text = "20人以下"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DegreeId");

                    b.ToTable("Dir_Degree");

                    b.HasData(
                        new
                        {
                            DegreeId = 1,
                            Text = "博士后"
                        },
                        new
                        {
                            DegreeId = 2,
                            Text = "博士"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Deliver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeliverDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliverStatusId")
                        .HasColumnType("int");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResumeSubmittedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeliverStatusId");

                    b.HasIndex("JobId");

                    b.HasIndex("ResumeSubmittedId");

                    b.ToTable("S_Deliver");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            DeliverDateTime = new DateTime(2020, 10, 20, 17, 44, 19, 794, DateTimeKind.Local).AddTicks(4045),
                            DeliverStatusId = 1,
                            JobId = "3eed3eed-3eed-2020-3eed-123456789abc",
                            ResumeSubmittedId = "3eed3eed-3eed-2020-3eed-123456789abc"
                        });
                });

            modelBuilder.Entity("GetJob.Models.DeliverStatus", b =>
                {
                    b.Property<int>("DeliverStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DeliverStatusId");

                    b.ToTable("Dir_DeliverStatus");

                    b.HasData(
                        new
                        {
                            DeliverStatusId = 1,
                            Text = "待审核"
                        },
                        new
                        {
                            DeliverStatusId = 2,
                            Text = "审核通过"
                        },
                        new
                        {
                            DeliverStatusId = 3,
                            Text = "审核未通过"
                        });
                });

            modelBuilder.Entity("GetJob.Models.InterviewNotify", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InterviewLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DeliverId");

                    b.ToTable("C_InterviewNotify");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            DeliverId = "3eed3eed-3eed-2020-3eed-123456789abc",
                            InterviewDate = new DateTime(2020, 10, 20, 17, 44, 19, 794, DateTimeKind.Local).AddTicks(6653),
                            InterviewLocation = "",
                            Note = "",
                            Title = "通知测试种子数据"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Job", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("JobCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("JobKindId")
                        .HasColumnType("int");

                    b.Property<int>("JobPayId")
                        .HasColumnType("int");

                    b.Property<int>("JobStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RecruitNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("JobCharacterId");

                    b.HasIndex("JobKindId");

                    b.HasIndex("JobPayId");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("LocationId");

                    b.ToTable("C_Job");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            CompanyId = "3eed3eed-3eed-2020-3eed-123456789abc",
                            DegreeId = 2,
                            Description = "",
                            JobCharacterId = 3,
                            JobKindId = 10001,
                            JobPayId = 4,
                            JobStatusId = 1,
                            LastModify = new DateTime(2020, 10, 20, 17, 44, 19, 791, DateTimeKind.Local).AddTicks(482),
                            LocationId = 330105,
                            Name = "测试攻城师",
                            RecruitNumber = 19
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobCharacter", b =>
                {
                    b.Property<int>("JobCharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobCharacterId");

                    b.ToTable("Dir_JobCharacter");

                    b.HasData(
                        new
                        {
                            JobCharacterId = 1,
                            Text = "全职"
                        },
                        new
                        {
                            JobCharacterId = 2,
                            Text = "临时"
                        },
                        new
                        {
                            JobCharacterId = 3,
                            Text = "实习"
                        },
                        new
                        {
                            JobCharacterId = 4,
                            Text = "兼职"
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobCollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CollectionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("StudentId");

                    b.ToTable("S_JobCollection");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            CollectionDateTime = new DateTime(2020, 10, 20, 17, 44, 19, 794, DateTimeKind.Local).AddTicks(9865),
                            JobId = "3eed3eed-3eed-2020-3eed-123456789abc",
                            StudentId = "3eed3eed-3eed-2020-3eed-123456789abc"
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobKind", b =>
                {
                    b.Property<int>("JobKindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobKindId");

                    b.ToTable("Dir_JobKind");

                    b.HasData(
                        new
                        {
                            JobKindId = 10000,
                            Text = "计算机类"
                        },
                        new
                        {
                            JobKindId = 10001,
                            Text = "测试"
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobPay", b =>
                {
                    b.Property<int>("JobPayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("PayFrom")
                        .HasColumnType("float");

                    b.Property<double>("PayTo")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobPayId");

                    b.ToTable("Dir_JobPay");

                    b.HasData(
                        new
                        {
                            JobPayId = 1,
                            PayFrom = 0.0,
                            PayTo = 1000.0,
                            Text = "1000以下"
                        },
                        new
                        {
                            JobPayId = 2,
                            PayFrom = 1000.0,
                            PayTo = 2000.0,
                            Text = "1k~2k"
                        },
                        new
                        {
                            JobPayId = 3,
                            PayFrom = 2000.0,
                            PayTo = 3000.0,
                            Text = "2k~3k"
                        },
                        new
                        {
                            JobPayId = 4,
                            PayFrom = 3000.0,
                            PayTo = 4000.0,
                            Text = "3k~4k"
                        },
                        new
                        {
                            JobPayId = 5,
                            PayFrom = 4000.0,
                            PayTo = 6000.0,
                            Text = "4k~6k"
                        },
                        new
                        {
                            JobPayId = 6,
                            PayFrom = 6000.0,
                            PayTo = 8000.0,
                            Text = "6k~8k"
                        },
                        new
                        {
                            JobPayId = 7,
                            PayFrom = 8000.0,
                            PayTo = 10000.0,
                            Text = "8k~1k"
                        },
                        new
                        {
                            JobPayId = 8,
                            PayFrom = 10000.0,
                            PayTo = 15000.0,
                            Text = "10k~15k"
                        },
                        new
                        {
                            JobPayId = 9,
                            PayFrom = 15000.0,
                            PayTo = 20000.0,
                            Text = "15k~20k"
                        },
                        new
                        {
                            JobPayId = 10,
                            PayFrom = 20000.0,
                            PayTo = 30000.0,
                            Text = "20k~30k"
                        },
                        new
                        {
                            JobPayId = 11,
                            PayFrom = 30000.0,
                            PayTo = 50000.0,
                            Text = "30k~50k"
                        },
                        new
                        {
                            JobPayId = 12,
                            PayFrom = 50000.0,
                            PayTo = 10000000.0,
                            Text = "50k以上"
                        });
                });

            modelBuilder.Entity("GetJob.Models.JobStatus", b =>
                {
                    b.Property<int>("JobStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobStatusId");

                    b.ToTable("Dir_JobStatus");

                    b.HasData(
                        new
                        {
                            JobStatusId = 1,
                            Text = "招聘中"
                        },
                        new
                        {
                            JobStatusId = 2,
                            Text = "招聘结束"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LocationId");

                    b.ToTable("Dir_Location");

                    b.HasData(
                        new
                        {
                            LocationId = 110000,
                            Text = "北京市"
                        },
                        new
                        {
                            LocationId = 330000,
                            Text = "浙江省"
                        },
                        new
                        {
                            LocationId = 330100,
                            Text = "浙江省杭州市"
                        },
                        new
                        {
                            LocationId = 330200,
                            Text = "浙江省宁波市"
                        },
                        new
                        {
                            LocationId = 330105,
                            Text = "浙江省杭州市拱墅区"
                        },
                        new
                        {
                            LocationId = 330106,
                            Text = "浙江省杭州市西湖区"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Nation", b =>
                {
                    b.Property<int>("NationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("NationId");

                    b.ToTable("Dir_Nation");

                    b.HasData(
                        new
                        {
                            NationId = 1,
                            Text = "汉族"
                        },
                        new
                        {
                            NationId = 2,
                            Text = "蒙古族"
                        });
                });

            modelBuilder.Entity("GetJob.Models.PoliticalOutlook", b =>
                {
                    b.Property<int>("PoliticalOutlookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PoliticalOutlookId");

                    b.ToTable("Dir_PoliticalOutlook");

                    b.HasData(
                        new
                        {
                            PoliticalOutlookId = 1,
                            Text = "共青团员"
                        },
                        new
                        {
                            PoliticalOutlookId = 2,
                            Text = "中共党员"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Resume", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForJobAddressId")
                        .HasColumnType("int");

                    b.Property<int>("ForJobCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ForJobKindId")
                        .HasColumnType("int");

                    b.Property<int>("ForJobPayId")
                        .HasColumnType("int");

                    b.Property<string>("SelfEvaluation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Visible")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("WorkExperience")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForJobAddressId");

                    b.HasIndex("ForJobCharacterId");

                    b.HasIndex("ForJobKindId");

                    b.HasIndex("ForJobPayId");

                    b.HasIndex("StudentId");

                    b.ToTable("S_Resume");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            Certificate = "",
                            CreateDateTime = new DateTime(2020, 10, 20, 17, 44, 19, 793, DateTimeKind.Local).AddTicks(571),
                            ForJobAddressId = 330105,
                            ForJobCharacterId = 1,
                            ForJobKindId = 10001,
                            ForJobPayId = 1,
                            SelfEvaluation = "",
                            State = "",
                            StudentId = "3eed3eed-3eed-2020-3eed-123456789abc",
                            Title = "简历种子数据",
                            Visible = "",
                            WorkExperience = ""
                        });
                });

            modelBuilder.Entity("GetJob.Models.ResumeSubmitted", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForJobAddressId")
                        .HasColumnType("int");

                    b.Property<int>("ForJobCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ForJobKindId")
                        .HasColumnType("int");

                    b.Property<int>("ForJobPayId")
                        .HasColumnType("int");

                    b.Property<string>("SelfEvaluation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Visible")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("WorkExperience")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ForJobAddressId");

                    b.HasIndex("ForJobCharacterId");

                    b.HasIndex("ForJobKindId");

                    b.HasIndex("ForJobPayId");

                    b.HasIndex("StudentId");

                    b.ToTable("S_ResumeSubmitted");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            Certificate = "",
                            CreateDateTime = new DateTime(2020, 10, 20, 17, 44, 19, 793, DateTimeKind.Local).AddTicks(6402),
                            ForJobAddressId = 330105,
                            ForJobCharacterId = 1,
                            ForJobKindId = 10001,
                            ForJobPayId = 1,
                            SelfEvaluation = "",
                            State = "",
                            StudentId = "3eed3eed-3eed-2020-3eed-123456789abc",
                            Title = "简历种子数据",
                            Visible = "",
                            WorkExperience = ""
                        });
                });

            modelBuilder.Entity("GetJob.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("BirthPlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("College")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(18)")
                        .HasMaxLength(18);

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<int>("PoliticalOutlookId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime>("StudyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("NationId");

                    b.HasIndex("PoliticalOutlookId");

                    b.ToTable("S_Student");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            Address = "null",
                            BirthPlaceId = 330106,
                            Birthday = new DateTime(2020, 10, 20, 17, 44, 19, 792, DateTimeKind.Local).AddTicks(4947),
                            College = "浙江树人大学",
                            DegreeId = 2,
                            IdentityNumber = "330682199909301038",
                            Mail = "123@123.com",
                            Major = "计算机",
                            Name = "吴知",
                            NationId = 1,
                            Phone = "12345678900",
                            PoliticalOutlookId = 1,
                            Sex = "男",
                            StudyDate = new DateTime(2017, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GetJob.Models.StudentCollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CollectionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StudentId");

                    b.ToTable("C_StudentCollection");

                    b.HasData(
                        new
                        {
                            Id = "3eed3eed-3eed-2020-3eed-123456789abc",
                            CollectionDateTime = new DateTime(2020, 10, 20, 17, 44, 19, 795, DateTimeKind.Local).AddTicks(2310),
                            CompanyId = "3eed3eed-3eed-2020-3eed-123456789abc",
                            StudentId = "3eed3eed-3eed-2020-3eed-123456789abc"
                        });
                });

            modelBuilder.Entity("GetJob.Models.Company", b =>
                {
                    b.HasOne("GetJob.Models.CompanyField", "CompanyField")
                        .WithMany()
                        .HasForeignKey("CompanyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.CompanyScale", "CompanyScale")
                        .WithMany()
                        .HasForeignKey("CompanyScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.Deliver", b =>
                {
                    b.HasOne("GetJob.Models.DeliverStatus", "DeliverStatus")
                        .WithMany()
                        .HasForeignKey("DeliverStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.ResumeSubmitted", "ResumeSubmitted")
                        .WithMany()
                        .HasForeignKey("ResumeSubmittedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.InterviewNotify", b =>
                {
                    b.HasOne("GetJob.Models.Deliver", "Deliver")
                        .WithMany()
                        .HasForeignKey("DeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.Job", b =>
                {
                    b.HasOne("GetJob.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobCharacter", "JobCharacter")
                        .WithMany()
                        .HasForeignKey("JobCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobKind", "JobKind")
                        .WithMany()
                        .HasForeignKey("JobKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobPay", "JobPay")
                        .WithMany()
                        .HasForeignKey("JobPayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobStatus", "JobStatus")
                        .WithMany()
                        .HasForeignKey("JobStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.JobCollection", b =>
                {
                    b.HasOne("GetJob.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.Resume", b =>
                {
                    b.HasOne("GetJob.Models.Location", "ForJobAddress")
                        .WithMany()
                        .HasForeignKey("ForJobAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobCharacter", "ForJobCharacter")
                        .WithMany()
                        .HasForeignKey("ForJobCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobKind", "ForJobKind")
                        .WithMany()
                        .HasForeignKey("ForJobKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobPay", "ForJobPay")
                        .WithMany()
                        .HasForeignKey("ForJobPayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.ResumeSubmitted", b =>
                {
                    b.HasOne("GetJob.Models.Location", "ForJobAddress")
                        .WithMany()
                        .HasForeignKey("ForJobAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobCharacter", "ForJobCharacter")
                        .WithMany()
                        .HasForeignKey("ForJobCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobKind", "ForJobKind")
                        .WithMany()
                        .HasForeignKey("ForJobKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.JobPay", "ForJobPay")
                        .WithMany()
                        .HasForeignKey("ForJobPayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.Student", b =>
                {
                    b.HasOne("GetJob.Models.Location", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.PoliticalOutlook", "PoliticalOutlook")
                        .WithMany()
                        .HasForeignKey("PoliticalOutlookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GetJob.Models.StudentCollection", b =>
                {
                    b.HasOne("GetJob.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GetJob.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
